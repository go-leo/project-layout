// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: pkg/kafkax/config.proto

package kafkax

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs map[string]*Options `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_kafkax_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_kafkax_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_pkg_kafkax_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetConfigs() map[string]*Options {
	if x != nil {
		return x.Configs
	}
	return nil
}

// Config is used to pass multiple configuration options to Sarama's constructors.
type Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrs    []string                `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
	GroupId  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Consumer *Options_Consumer       `protobuf:"bytes,3,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Producer *Options_Producer       `protobuf:"bytes,4,opt,name=producer,proto3" json:"producer,omitempty"`
	Version  *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Options) Reset() {
	*x = Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_kafkax_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options) ProtoMessage() {}

func (x *Options) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_kafkax_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options.ProtoReflect.Descriptor instead.
func (*Options) Descriptor() ([]byte, []int) {
	return file_pkg_kafkax_config_proto_rawDescGZIP(), []int{1}
}

func (x *Options) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *Options) GetGroupId() *wrapperspb.StringValue {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *Options) GetConsumer() *Options_Consumer {
	if x != nil {
		return x.Consumer
	}
	return nil
}

func (x *Options) GetProducer() *Options_Producer {
	if x != nil {
		return x.Producer
	}
	return nil
}

func (x *Options) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

type Options_Consumer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group  *Options_Consumer_Group  `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Offset *Options_Consumer_Offset `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Options_Consumer) Reset() {
	*x = Options_Consumer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_kafkax_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Consumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Consumer) ProtoMessage() {}

func (x *Options_Consumer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_kafkax_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Consumer.ProtoReflect.Descriptor instead.
func (*Options_Consumer) Descriptor() ([]byte, []int) {
	return file_pkg_kafkax_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Options_Consumer) GetGroup() *Options_Consumer_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Options_Consumer) GetOffset() *Options_Consumer_Offset {
	if x != nil {
		return x.Offset
	}
	return nil
}

type Options_Producer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredAcks *wrapperspb.Int32Value   `protobuf:"bytes,1,opt,name=required_acks,json=requiredAcks,proto3" json:"required_acks,omitempty"`
	Retry        *Options_Producer_Retry  `protobuf:"bytes,2,opt,name=retry,proto3" json:"retry,omitempty"` // 添加 Retry 消息
	Return       *Options_Producer_Return `protobuf:"bytes,3,opt,name=return,proto3" json:"return,omitempty"`
}

func (x *Options_Producer) Reset() {
	*x = Options_Producer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_kafkax_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Producer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Producer) ProtoMessage() {}

func (x *Options_Producer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_kafkax_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Producer.ProtoReflect.Descriptor instead.
func (*Options_Producer) Descriptor() ([]byte, []int) {
	return file_pkg_kafkax_config_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Options_Producer) GetRequiredAcks() *wrapperspb.Int32Value {
	if x != nil {
		return x.RequiredAcks
	}
	return nil
}

func (x *Options_Producer) GetRetry() *Options_Producer_Retry {
	if x != nil {
		return x.Retry
	}
	return nil
}

func (x *Options_Producer) GetReturn() *Options_Producer_Return {
	if x != nil {
		return x.Return
	}
	return nil
}

type Options_Consumer_Offset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Initial *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=initial,proto3" json:"initial,omitempty"`
}

func (x *Options_Consumer_Offset) Reset() {
	*x = Options_Consumer_Offset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_kafkax_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Consumer_Offset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Consumer_Offset) ProtoMessage() {}

func (x *Options_Consumer_Offset) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_kafkax_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Consumer_Offset.ProtoReflect.Descriptor instead.
func (*Options_Consumer_Offset) Descriptor() ([]byte, []int) {
	return file_pkg_kafkax_config_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *Options_Consumer_Offset) GetInitial() *wrapperspb.Int64Value {
	if x != nil {
		return x.Initial
	}
	return nil
}

type Options_Consumer_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rebalance *Options_Consumer_Group_Rebalance `protobuf:"bytes,1,opt,name=rebalance,proto3" json:"rebalance,omitempty"`
}

func (x *Options_Consumer_Group) Reset() {
	*x = Options_Consumer_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_kafkax_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Consumer_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Consumer_Group) ProtoMessage() {}

func (x *Options_Consumer_Group) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_kafkax_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Consumer_Group.ProtoReflect.Descriptor instead.
func (*Options_Consumer_Group) Descriptor() ([]byte, []int) {
	return file_pkg_kafkax_config_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *Options_Consumer_Group) GetRebalance() *Options_Consumer_Group_Rebalance {
	if x != nil {
		return x.Rebalance
	}
	return nil
}

type Options_Consumer_Group_Rebalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupStrategies *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=group_strategies,json=groupStrategies,proto3" json:"group_strategies,omitempty"`
}

func (x *Options_Consumer_Group_Rebalance) Reset() {
	*x = Options_Consumer_Group_Rebalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_kafkax_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Consumer_Group_Rebalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Consumer_Group_Rebalance) ProtoMessage() {}

func (x *Options_Consumer_Group_Rebalance) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_kafkax_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Consumer_Group_Rebalance.ProtoReflect.Descriptor instead.
func (*Options_Consumer_Group_Rebalance) Descriptor() ([]byte, []int) {
	return file_pkg_kafkax_config_proto_rawDescGZIP(), []int{1, 0, 1, 0}
}

func (x *Options_Consumer_Group_Rebalance) GetGroupStrategies() *wrapperspb.StringValue {
	if x != nil {
		return x.GroupStrategies
	}
	return nil
}

type Options_Producer_RequiredAcks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Options_Producer_RequiredAcks) Reset() {
	*x = Options_Producer_RequiredAcks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_kafkax_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Producer_RequiredAcks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Producer_RequiredAcks) ProtoMessage() {}

func (x *Options_Producer_RequiredAcks) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_kafkax_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Producer_RequiredAcks.ProtoReflect.Descriptor instead.
func (*Options_Producer_RequiredAcks) Descriptor() ([]byte, []int) {
	return file_pkg_kafkax_config_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *Options_Producer_RequiredAcks) GetValue() *wrapperspb.Int32Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type Options_Producer_Retry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Max             *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max,proto3" json:"max,omitempty"`                                                  // The total number of times to retry sending a message (default 3).
	Backoff         *durationpb.Duration   `protobuf:"bytes,2,opt,name=backoff,proto3" json:"backoff,omitempty"`                                          // How long to wait for the cluster to settle between retries (default 100ms).
	MaxBufferLength *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=max_buffer_length,json=maxBufferLength,proto3" json:"max_buffer_length,omitempty"` // The maximum length of the bridging buffer between `input` and `retries` channels in AsyncProducer#retryHandler.
	MaxBufferBytes  *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=max_buffer_bytes,json=maxBufferBytes,proto3" json:"max_buffer_bytes,omitempty"`    // The maximum total byte size of messages in the bridging buffer between `input` and `retries` channels in AsyncProducer#retryHandler.
}

func (x *Options_Producer_Retry) Reset() {
	*x = Options_Producer_Retry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_kafkax_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Producer_Retry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Producer_Retry) ProtoMessage() {}

func (x *Options_Producer_Retry) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_kafkax_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Producer_Retry.ProtoReflect.Descriptor instead.
func (*Options_Producer_Retry) Descriptor() ([]byte, []int) {
	return file_pkg_kafkax_config_proto_rawDescGZIP(), []int{1, 1, 1}
}

func (x *Options_Producer_Retry) GetMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Options_Producer_Retry) GetBackoff() *durationpb.Duration {
	if x != nil {
		return x.Backoff
	}
	return nil
}

func (x *Options_Producer_Retry) GetMaxBufferLength() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxBufferLength
	}
	return nil
}

func (x *Options_Producer_Retry) GetMaxBufferBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxBufferBytes
	}
	return nil
}

type Options_Producer_Return struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successes *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=successes,proto3" json:"successes,omitempty"`
	Errors    *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *Options_Producer_Return) Reset() {
	*x = Options_Producer_Return{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_kafkax_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Producer_Return) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Producer_Return) ProtoMessage() {}

func (x *Options_Producer_Return) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_kafkax_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Producer_Return.ProtoReflect.Descriptor instead.
func (*Options_Producer_Return) Descriptor() ([]byte, []int) {
	return file_pkg_kafkax_config_proto_rawDescGZIP(), []int{1, 1, 2}
}

func (x *Options_Producer_Return) GetSuccesses() *wrapperspb.BoolValue {
	if x != nil {
		return x.Successes
	}
	return nil
}

func (x *Options_Producer_Return) GetErrors() *wrapperspb.BoolValue {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_pkg_kafkax_config_proto protoreflect.FileDescriptor

var file_pkg_kafkax_config_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x78, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6c, 0x65, 0x6f, 0x2e, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x01, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x56, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x6f,
	0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa5, 0x0a, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64,
	0x64, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x3f, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x78, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x83, 0x03, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x78, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x42, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x3f, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x1a, 0xb0, 0x01, 0x0a, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x54, 0x0a, 0x09, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x1a, 0x8a, 0x05, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x63, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6f,
	0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x06,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c,
	0x65, 0x6f, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x1a, 0x41, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x63, 0x6b, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xfb, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x33, 0x0a, 0x07,
	0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x10, 0x6d, 0x61,
	0x78, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x1a, 0x76, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x6c, 0x65, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x78, 0x3b, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x78, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_kafkax_config_proto_rawDescOnce sync.Once
	file_pkg_kafkax_config_proto_rawDescData = file_pkg_kafkax_config_proto_rawDesc
)

func file_pkg_kafkax_config_proto_rawDescGZIP() []byte {
	file_pkg_kafkax_config_proto_rawDescOnce.Do(func() {
		file_pkg_kafkax_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_kafkax_config_proto_rawDescData)
	})
	return file_pkg_kafkax_config_proto_rawDescData
}

var file_pkg_kafkax_config_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pkg_kafkax_config_proto_goTypes = []interface{}{
	(*Config)(nil),                           // 0: leo.kafkax.config.Config
	(*Options)(nil),                          // 1: leo.kafkax.config.Options
	nil,                                      // 2: leo.kafkax.config.Config.ConfigsEntry
	(*Options_Consumer)(nil),                 // 3: leo.kafkax.config.Options.Consumer
	(*Options_Producer)(nil),                 // 4: leo.kafkax.config.Options.Producer
	(*Options_Consumer_Offset)(nil),          // 5: leo.kafkax.config.Options.Consumer.Offset
	(*Options_Consumer_Group)(nil),           // 6: leo.kafkax.config.Options.Consumer.Group
	(*Options_Consumer_Group_Rebalance)(nil), // 7: leo.kafkax.config.Options.Consumer.Group.Rebalance
	(*Options_Producer_RequiredAcks)(nil),    // 8: leo.kafkax.config.Options.Producer.RequiredAcks
	(*Options_Producer_Retry)(nil),           // 9: leo.kafkax.config.Options.Producer.Retry
	(*Options_Producer_Return)(nil),          // 10: leo.kafkax.config.Options.Producer.Return
	(*wrapperspb.StringValue)(nil),           // 11: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),            // 12: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),            // 13: google.protobuf.Int64Value
	(*durationpb.Duration)(nil),              // 14: google.protobuf.Duration
	(*wrapperspb.BoolValue)(nil),             // 15: google.protobuf.BoolValue
}
var file_pkg_kafkax_config_proto_depIdxs = []int32{
	2,  // 0: leo.kafkax.config.Config.configs:type_name -> leo.kafkax.config.Config.ConfigsEntry
	11, // 1: leo.kafkax.config.Options.group_id:type_name -> google.protobuf.StringValue
	3,  // 2: leo.kafkax.config.Options.consumer:type_name -> leo.kafkax.config.Options.Consumer
	4,  // 3: leo.kafkax.config.Options.producer:type_name -> leo.kafkax.config.Options.Producer
	11, // 4: leo.kafkax.config.Options.version:type_name -> google.protobuf.StringValue
	1,  // 5: leo.kafkax.config.Config.ConfigsEntry.value:type_name -> leo.kafkax.config.Options
	6,  // 6: leo.kafkax.config.Options.Consumer.group:type_name -> leo.kafkax.config.Options.Consumer.Group
	5,  // 7: leo.kafkax.config.Options.Consumer.offset:type_name -> leo.kafkax.config.Options.Consumer.Offset
	12, // 8: leo.kafkax.config.Options.Producer.required_acks:type_name -> google.protobuf.Int32Value
	9,  // 9: leo.kafkax.config.Options.Producer.retry:type_name -> leo.kafkax.config.Options.Producer.Retry
	10, // 10: leo.kafkax.config.Options.Producer.return:type_name -> leo.kafkax.config.Options.Producer.Return
	13, // 11: leo.kafkax.config.Options.Consumer.Offset.initial:type_name -> google.protobuf.Int64Value
	7,  // 12: leo.kafkax.config.Options.Consumer.Group.rebalance:type_name -> leo.kafkax.config.Options.Consumer.Group.Rebalance
	11, // 13: leo.kafkax.config.Options.Consumer.Group.Rebalance.group_strategies:type_name -> google.protobuf.StringValue
	12, // 14: leo.kafkax.config.Options.Producer.RequiredAcks.value:type_name -> google.protobuf.Int32Value
	13, // 15: leo.kafkax.config.Options.Producer.Retry.max:type_name -> google.protobuf.Int64Value
	14, // 16: leo.kafkax.config.Options.Producer.Retry.backoff:type_name -> google.protobuf.Duration
	13, // 17: leo.kafkax.config.Options.Producer.Retry.max_buffer_length:type_name -> google.protobuf.Int64Value
	13, // 18: leo.kafkax.config.Options.Producer.Retry.max_buffer_bytes:type_name -> google.protobuf.Int64Value
	15, // 19: leo.kafkax.config.Options.Producer.Return.successes:type_name -> google.protobuf.BoolValue
	15, // 20: leo.kafkax.config.Options.Producer.Return.errors:type_name -> google.protobuf.BoolValue
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_pkg_kafkax_config_proto_init() }
func file_pkg_kafkax_config_proto_init() {
	if File_pkg_kafkax_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_kafkax_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_kafkax_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_kafkax_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Consumer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_kafkax_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Producer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_kafkax_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Consumer_Offset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_kafkax_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Consumer_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_kafkax_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Consumer_Group_Rebalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_kafkax_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Producer_RequiredAcks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_kafkax_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Producer_Retry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_kafkax_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Producer_Return); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_kafkax_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_kafkax_config_proto_goTypes,
		DependencyIndexes: file_pkg_kafkax_config_proto_depIdxs,
		MessageInfos:      file_pkg_kafkax_config_proto_msgTypes,
	}.Build()
	File_pkg_kafkax_config_proto = out.File
	file_pkg_kafkax_config_proto_rawDesc = nil
	file_pkg_kafkax_config_proto_goTypes = nil
	file_pkg_kafkax_config_proto_depIdxs = nil
}
